{"version":3,"sources":["../src/Image.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,UAAU,kBAAG,OAAH,CAAW,MAAX,CAAkB;AAChC,SAAO;AACL;AADK;AADyB,CAAlB,CAAhB;;kBAsBe,kBAAG,eAAH,CACf,gBAQM;AAAA,MAPJ,KAOI,QAPJ,KAOI;AAAA,MANJ,MAMI,QANJ,MAMI;AAAA,MALJ,MAKI,QALJ,MAKI;AAAA,MAJJ,SAII,QAJJ,SAII;AAAA,6BAHJ,UAGI;AAAA,MAHJ,UAGI,mCAHS,OAGT;AAAA,MAFJ,MAEI,QAFJ,MAEI;AAAA,MADJ,IACI,QADJ,IACI;;AACJ,MAAI,CAAC,SAAL,EAAgB;AACd,QAAI,OAAO,KAAP,IAAgB,OAAO,MAA3B,EAAmC;AACjC,kBAAY,EAAE,OAAO,OAAO,KAAhB,EAAuB,QAAQ,OAAO,MAAtC,EAAZ;AACD,KAFD,MAGK;AACH,YAAM,IAAI,KAAJ,CAAU,oFAAV,CAAN;AACD;AACF;AACD,MAAI,aAAJ;AACA,UAAQ,UAAR;AACA,SAAK,OAAL;AAAc;AACZ,YAAI,CAAC,MAAL,EAAa,SAAS,CAAE,GAAF,EAAO,GAAP,CAAT;AACb,YAAI,CAAC,IAAL,EAAW,OAAO,CAAP;AACX,YAAI,OAAO,wBAAS,IAAT,EAAe,MAAf,EAAuB,EAAE,YAAF,EAAS,cAAT,EAAvB,EAA0C,SAA1C,CAAX;AACA,eAAO,yBAAU,IAAV,EAAgB,CAAE,CAAF,EAAK,CAAL,EAAQ,UAAU,KAAlB,EAAyB,UAAU,MAAnC,CAAhB,CAAP;AACA,eAAO,CACL,KAAK,CAAL,IAAU,UAAU,KADf,EAEL,KAAK,CAAL,IAAU,UAAU,MAFf,EAGL,KAAK,CAAL,IAAU,UAAU,KAHf,EAIL,KAAK,CAAL,IAAU,UAAU,MAJf,CAAP;AAMA;AACD;AACD,SAAK,SAAL;AAAgB;AACd,YAAI,UAAU,IAAd,EAAoB;AAClB,kBAAQ,IAAR,CAAa,kFAAb;AACD;AACD,YAAM,QAAQ,QAAQ,MAAtB;AACA,YAAM,aAAa,UAAU,KAAV,GAAkB,UAAU,MAA/C;AACA,eACE,QAAQ,UAAR,GACE,CAAE,CAAC,IAAI,QAAQ,UAAb,IAA2B,CAA7B,EAAgC,CAAhC,EAAmC,QAAQ,UAA3C,EAAuD,CAAvD,CADF,GAEE,CAAE,CAAF,EAAK,CAAC,IAAI,aAAa,KAAlB,IAA2B,CAAhC,EAAmC,CAAnC,EAAsC,aAAa,KAAnD,CAHJ;AAIA;AACD;AACD,SAAK,SAAL;AACE,UAAI,UAAU,IAAd,EAAoB;AAClB,gBAAQ,IAAR,CAAa,kFAAb;AACD;AACD,aAAO,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAP;AACA;;AAEF;AACE,YAAM,IAAI,KAAJ,CAAU,wCAAsC,UAAhD,CAAN;AAlCF;;AAqCA,SAAO,gDAAI,IAAJ;AACL,YAAQ,QAAQ,KADX;AAEL,cAAU;AACR,SAAG,MADK;AAER;AAFQ;AAFL,IAAP;AAOD,CA/Dc,EAgEb;AACE,eAAa,OADf;AAEE,aAAW;AACT,YAAQ,iBAAU,GAAV,CAAc,UADb;AAET,eAAW,iBAAU,KAAV,CAAgB;AACzB,aAAO,iBAAU,MAAV,CAAiB,UADC;AAEzB,cAAQ,iBAAU,MAAV,CAAiB;AAFA,KAAhB,CAFF;AAMT,gBAAY,iBAAU;AANb;AAFb,CAhEa,C","file":"Image.js","sourcesContent":["import GL from \"gl-react\";\nimport React, {PropTypes} from \"react\";\nimport rectCrop from \"rect-crop\";\nimport rectClamp from \"rect-clamp\";\n\nconst shaders = GL.Shaders.create({\n  image: {\n    frag: `\nprecision highp float;\nvarying vec2 uv;\nuniform sampler2D t;\nuniform vec4 crop;\nvec2 invert (vec2 p) {${\"\"/* y is reversed in gl context */}\n  return vec2(p.x, 1.0-p.y);\n}\nvoid main () {\n  vec2 p = invert(invert(uv) * crop.zw + crop.xy);\n  gl_FragColor =\n    step(0.0, p.x) *\n    step(0.0, p.y) *\n    step(p.x, 1.0) *\n    step(p.y, 1.0) *\n    texture2D(t, p);\n}`\n  }\n});\n\nexport default GL.createComponent(\n({\n  width,\n  height,\n  source,\n  imageSize,\n  resizeMode = \"cover\",\n  center,\n  zoom,\n}) => {\n  if (!imageSize) {\n    if (source.width && source.height) {\n      imageSize = { width: source.width, height: source.height };\n    }\n    else {\n      throw new Error(\"gl-rect-image: imageSize is required if you don't provide {width,height} in source\");\n    }\n  }\n  let crop;\n  switch (resizeMode) {\n  case \"cover\": {\n    if (!center) center = [ 0.5, 0.5 ];\n    if (!zoom) zoom = 1;\n    let rect = rectCrop(zoom, center)({ width, height }, imageSize);\n    rect = rectClamp(rect, [ 0, 0, imageSize.width, imageSize.height ]);\n    crop = [\n      rect[0] / imageSize.width,\n      rect[1] / imageSize.height,\n      rect[2] / imageSize.width,\n      rect[3] / imageSize.height\n    ];\n    break;\n  }\n  case \"contain\": {\n    if (center || zoom) {\n      console.warn(\"gl-react-image: center and zoom props are only supported with resizeMode='cover'\");\n    }\n    const ratio = width / height;\n    const imageRatio = imageSize.width / imageSize.height;\n    crop =\n      ratio > imageRatio\n      ? [ (1 - ratio / imageRatio) / 2, 0, ratio / imageRatio, 1 ]\n      : [ 0, (1 - imageRatio / ratio) / 2, 1, imageRatio / ratio ];\n    break;\n  }\n  case \"stretch\":\n    if (center || zoom) {\n      console.warn(\"gl-react-image: center and zoom props are only supported with resizeMode='cover'\");\n    }\n    crop = [ 0, 0, 1, 1 ];\n    break;\n\n  default:\n    throw new Error(\"gl-react-image: unknown resizeMode=\"+resizeMode);\n  }\n\n  return <GL.Node\n    shader={shaders.image}\n    uniforms={{\n      t: source,\n      crop,\n    }}\n  />;\n},\n  {\n    displayName: \"Image\",\n    propTypes: {\n      source: PropTypes.any.isRequired,\n      imageSize: PropTypes.shape({\n        width: PropTypes.number.isRequired,\n        height: PropTypes.number.isRequired,\n      }),\n      resizeMode: PropTypes.string,\n    }\n  });\n"]}